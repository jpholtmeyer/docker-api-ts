/* tslint:disable */
/* eslint-disable */
/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BuildPruneResponse } from '../models';
// @ts-ignore
import type { ContainerConfig } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { HistoryResponseItem } from '../models';
// @ts-ignore
import type { IdResponse } from '../models';
// @ts-ignore
import type { ImageDeleteResponseItem } from '../models';
// @ts-ignore
import type { ImageInspect } from '../models';
// @ts-ignore
import type { ImagePruneResponse } from '../models';
// @ts-ignore
import type { ImageSearchResponseItem } from '../models';
// @ts-ignore
import type { ImageSummary } from '../models';
/**
 * ImageApi - axios parameter creator
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
         * @param {boolean} [all] Remove all types of build cache
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon\&#39;s time, during which build cache was not used, in Go\&#39;s duration format (e.g., \&#39;24h\&#39;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPrune: async (keepStorage?: number, all?: boolean, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/build/prune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keepStorage !== undefined) {
                localVarQueryParameter['keep-storage'] = keepStorage;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive\'s root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
         * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
         * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
         * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the fileâ€™s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
         * @param {boolean} [q] Suppress verbose build output.
         * @param {boolean} [nocache] Do not use the cache when building the image.
         * @param {string} [cachefrom] JSON array of images used for build cache resolution.
         * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
         * @param {boolean} [rm] Remove intermediate containers after a successful build.
         * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
         * @param {number} [memory] Set memory limit for build.
         * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
         * @param {number} [cpushares] CPU shares (relative weight).
         * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
         * @param {number} [cpuperiod] The length of a CPU period in microseconds.
         * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
         * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
         * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
         * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
         * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
         * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network\&#39;s name or ID to which this container should connect to. 
         * @param {ImageBuildContentTypeEnum} [contentType] 
         * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [target] Target build stage
         * @param {string} [outputs] BuildKit output configuration
         * @param {ImageBuildVersionEnum} [version] Version of the builder backend to use.  - &#x60;1&#x60; is the first generation classic (deprecated) builder in the Docker daemon (default) - &#x60;2&#x60; is [BuildKit](https://github.com/moby/buildkit) 
         * @param {File} [inputStream] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageBuild: async (dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: ImageBuildContentTypeEnum, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, version?: ImageBuildVersionEnum, inputStream?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/build`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dockerfile !== undefined) {
                localVarQueryParameter['dockerfile'] = dockerfile;
            }

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            if (extrahosts !== undefined) {
                localVarQueryParameter['extrahosts'] = extrahosts;
            }

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (nocache !== undefined) {
                localVarQueryParameter['nocache'] = nocache;
            }

            if (cachefrom !== undefined) {
                localVarQueryParameter['cachefrom'] = cachefrom;
            }

            if (pull !== undefined) {
                localVarQueryParameter['pull'] = pull;
            }

            if (rm !== undefined) {
                localVarQueryParameter['rm'] = rm;
            }

            if (forcerm !== undefined) {
                localVarQueryParameter['forcerm'] = forcerm;
            }

            if (memory !== undefined) {
                localVarQueryParameter['memory'] = memory;
            }

            if (memswap !== undefined) {
                localVarQueryParameter['memswap'] = memswap;
            }

            if (cpushares !== undefined) {
                localVarQueryParameter['cpushares'] = cpushares;
            }

            if (cpusetcpus !== undefined) {
                localVarQueryParameter['cpusetcpus'] = cpusetcpus;
            }

            if (cpuperiod !== undefined) {
                localVarQueryParameter['cpuperiod'] = cpuperiod;
            }

            if (cpuquota !== undefined) {
                localVarQueryParameter['cpuquota'] = cpuquota;
            }

            if (buildargs !== undefined) {
                localVarQueryParameter['buildargs'] = buildargs;
            }

            if (shmsize !== undefined) {
                localVarQueryParameter['shmsize'] = shmsize;
            }

            if (squash !== undefined) {
                localVarQueryParameter['squash'] = squash;
            }

            if (labels !== undefined) {
                localVarQueryParameter['labels'] = labels;
            }

            if (networkmode !== undefined) {
                localVarQueryParameter['networkmode'] = networkmode;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (outputs !== undefined) {
                localVarQueryParameter['outputs'] = outputs;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (contentType != null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }

            if (xRegistryConfig != null) {
                localVarHeaderParameter['X-Registry-Config'] = String(xRegistryConfig);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputStream, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {string} [container] The ID or name of the container to commit
         * @param {string} [repo] Repository name for the created image
         * @param {string} [tag] Tag name for the create image
         * @param {string} [comment] Commit message
         * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
         * @param {boolean} [pause] Whether to pause the container before committing
         * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
         * @param {ContainerConfig} [containerConfig] The container configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCommit: async (container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, containerConfig?: ContainerConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (container !== undefined) {
                localVarQueryParameter['container'] = container;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (pause !== undefined) {
                localVarQueryParameter['pause'] = pause;
            }

            if (changes !== undefined) {
                localVarQueryParameter['changes'] = changes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(containerConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an image by either pulling it from a registry or importing it.
         * @summary Create an image
         * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
         * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
         * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
         * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
         * @param {string} [message] Set commit message for imported image.
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [inputImage] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate: async (fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, inputImage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromImage !== undefined) {
                localVarQueryParameter['fromImage'] = fromImage;
            }

            if (fromSrc !== undefined) {
                localVarQueryParameter['fromSrc'] = fromSrc;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (changes) {
                localVarQueryParameter['changes'] = changes.join(COLLECTION_FORMATS.csv);
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (xRegistryAuth != null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputImage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can\'t be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {string} name Image name or ID
         * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
         * @param {boolean} [noprune] Do not delete untagged parent images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDelete: async (name: string, force?: boolean, noprune?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageDelete', 'name', name)
            const localVarPath = `/images/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (noprune !== undefined) {
                localVarQueryParameter['noprune'] = noprune;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageGet', 'name', name)
            const localVarPath = `/images/{name}/get`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the \'repositories\' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {Array<string>} [names] Image names to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGetAll: async (names?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (names) {
                localVarQueryParameter['names'] = names.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageHistory: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageHistory', 'name', name)
            const localVarPath = `/images/{name}/history`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspect: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageInspect', 'name', name)
            const localVarPath = `/images/{name}/json`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) 
         * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList: async (all?: boolean, filters?: string, digests?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (digests !== undefined) {
                localVarQueryParameter['digests'] = digests;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {boolean} [quiet] Suppress progress details during load.
         * @param {File} [imagesTarball] Tar archive containing images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLoad: async (quiet?: boolean, imagesTarball?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quiet !== undefined) {
                localVarQueryParameter['quiet'] = quiet;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/x-tar';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagesTarball, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete unused images
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machineâ€™s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePrune: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/prune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {string} name Image name or ID.
         * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {string} [tag] The tag to associate with the image on the registry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePush: async (name: string, xRegistryAuth: string, tag?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imagePush', 'name', name)
            // verify required parameter 'xRegistryAuth' is not null or undefined
            assertParamExists('imagePush', 'xRegistryAuth', xRegistryAuth)
            const localVarPath = `/images/{name}/push`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (xRegistryAuth != null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {string} term Term to search
         * @param {number} [limit] Maximum number of results to return
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least \&#39;number\&#39; stars. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearch: async (term: string, limit?: number, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('imageSearch', 'term', term)
            const localVarPath = `/images/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {string} name Image name or ID to tag.
         * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
         * @param {string} [tag] The name of the new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageTag: async (name: string, repo?: string, tag?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageTag', 'name', name)
            const localVarPath = `/images/{name}/tag`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
         * @param {boolean} [all] Remove all types of build cache
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon\&#39;s time, during which build cache was not used, in Go\&#39;s duration format (e.g., \&#39;24h\&#39;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildPrune(keepStorage?: number, all?: boolean, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildPruneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildPrune(keepStorage, all, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.buildPrune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive\'s root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
         * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
         * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
         * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the fileâ€™s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
         * @param {boolean} [q] Suppress verbose build output.
         * @param {boolean} [nocache] Do not use the cache when building the image.
         * @param {string} [cachefrom] JSON array of images used for build cache resolution.
         * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
         * @param {boolean} [rm] Remove intermediate containers after a successful build.
         * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
         * @param {number} [memory] Set memory limit for build.
         * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
         * @param {number} [cpushares] CPU shares (relative weight).
         * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
         * @param {number} [cpuperiod] The length of a CPU period in microseconds.
         * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
         * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
         * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
         * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
         * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
         * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network\&#39;s name or ID to which this container should connect to. 
         * @param {ImageBuildContentTypeEnum} [contentType] 
         * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [target] Target build stage
         * @param {string} [outputs] BuildKit output configuration
         * @param {ImageBuildVersionEnum} [version] Version of the builder backend to use.  - &#x60;1&#x60; is the first generation classic (deprecated) builder in the Docker daemon (default) - &#x60;2&#x60; is [BuildKit](https://github.com/moby/buildkit) 
         * @param {File} [inputStream] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageBuild(dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: ImageBuildContentTypeEnum, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, version?: ImageBuildVersionEnum, inputStream?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageBuild(dockerfile, t, extrahosts, remote, q, nocache, cachefrom, pull, rm, forcerm, memory, memswap, cpushares, cpusetcpus, cpuperiod, cpuquota, buildargs, shmsize, squash, labels, networkmode, contentType, xRegistryConfig, platform, target, outputs, version, inputStream, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageBuild']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {string} [container] The ID or name of the container to commit
         * @param {string} [repo] Repository name for the created image
         * @param {string} [tag] Tag name for the create image
         * @param {string} [comment] Commit message
         * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
         * @param {boolean} [pause] Whether to pause the container before committing
         * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
         * @param {ContainerConfig} [containerConfig] The container configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageCommit(container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, containerConfig?: ContainerConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageCommit(container, repo, tag, comment, author, pause, changes, containerConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageCommit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create an image by either pulling it from a registry or importing it.
         * @summary Create an image
         * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
         * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
         * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
         * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
         * @param {string} [message] Set commit message for imported image.
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [inputImage] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageCreate(fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, inputImage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageCreate(fromImage, fromSrc, repo, tag, message, xRegistryAuth, changes, platform, inputImage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can\'t be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {string} name Image name or ID
         * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
         * @param {boolean} [noprune] Do not delete untagged parent images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageDelete(name: string, force?: boolean, noprune?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageDeleteResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageDelete(name, force, noprune, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageGet(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the \'repositories\' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {Array<string>} [names] Image names to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageGetAll(names?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageGetAll(names, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageHistory(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageHistory(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageInspect(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageInspect>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageInspect(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) 
         * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageList(all?: boolean, filters?: string, digests?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageList(all, filters, digests, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {boolean} [quiet] Suppress progress details during load.
         * @param {File} [imagesTarball] Tar archive containing images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageLoad(quiet?: boolean, imagesTarball?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageLoad(quiet, imagesTarball, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageLoad']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete unused images
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machineâ€™s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagePrune(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagePruneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagePrune(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imagePrune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {string} name Image name or ID.
         * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {string} [tag] The tag to associate with the image on the registry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagePush(name: string, xRegistryAuth: string, tag?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagePush(name, xRegistryAuth, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imagePush']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {string} term Term to search
         * @param {number} [limit] Maximum number of results to return
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least \&#39;number\&#39; stars. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageSearch(term: string, limit?: number, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageSearchResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageSearch(term, limit, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {string} name Image name or ID to tag.
         * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
         * @param {string} [tag] The name of the new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageTag(name: string, repo?: string, tag?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageTag(name, repo, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
         * @param {boolean} [all] Remove all types of build cache
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon\&#39;s time, during which build cache was not used, in Go\&#39;s duration format (e.g., \&#39;24h\&#39;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPrune(keepStorage?: number, all?: boolean, filters?: string, options?: any): AxiosPromise<BuildPruneResponse> {
            return localVarFp.buildPrune(keepStorage, all, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive\'s root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
         * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
         * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
         * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the fileâ€™s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
         * @param {boolean} [q] Suppress verbose build output.
         * @param {boolean} [nocache] Do not use the cache when building the image.
         * @param {string} [cachefrom] JSON array of images used for build cache resolution.
         * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
         * @param {boolean} [rm] Remove intermediate containers after a successful build.
         * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
         * @param {number} [memory] Set memory limit for build.
         * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
         * @param {number} [cpushares] CPU shares (relative weight).
         * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
         * @param {number} [cpuperiod] The length of a CPU period in microseconds.
         * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
         * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
         * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
         * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
         * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
         * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network\&#39;s name or ID to which this container should connect to. 
         * @param {ImageBuildContentTypeEnum} [contentType] 
         * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [target] Target build stage
         * @param {string} [outputs] BuildKit output configuration
         * @param {ImageBuildVersionEnum} [version] Version of the builder backend to use.  - &#x60;1&#x60; is the first generation classic (deprecated) builder in the Docker daemon (default) - &#x60;2&#x60; is [BuildKit](https://github.com/moby/buildkit) 
         * @param {File} [inputStream] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageBuild(dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: ImageBuildContentTypeEnum, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, version?: ImageBuildVersionEnum, inputStream?: File, options?: any): AxiosPromise<void> {
            return localVarFp.imageBuild(dockerfile, t, extrahosts, remote, q, nocache, cachefrom, pull, rm, forcerm, memory, memswap, cpushares, cpusetcpus, cpuperiod, cpuquota, buildargs, shmsize, squash, labels, networkmode, contentType, xRegistryConfig, platform, target, outputs, version, inputStream, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {string} [container] The ID or name of the container to commit
         * @param {string} [repo] Repository name for the created image
         * @param {string} [tag] Tag name for the create image
         * @param {string} [comment] Commit message
         * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
         * @param {boolean} [pause] Whether to pause the container before committing
         * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
         * @param {ContainerConfig} [containerConfig] The container configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCommit(container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, containerConfig?: ContainerConfig, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.imageCommit(container, repo, tag, comment, author, pause, changes, containerConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an image by either pulling it from a registry or importing it.
         * @summary Create an image
         * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
         * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
         * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
         * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
         * @param {string} [message] Set commit message for imported image.
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [inputImage] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate(fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, inputImage?: string, options?: any): AxiosPromise<void> {
            return localVarFp.imageCreate(fromImage, fromSrc, repo, tag, message, xRegistryAuth, changes, platform, inputImage, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can\'t be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {string} name Image name or ID
         * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
         * @param {boolean} [noprune] Do not delete untagged parent images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDelete(name: string, force?: boolean, noprune?: boolean, options?: any): AxiosPromise<Array<ImageDeleteResponseItem>> {
            return localVarFp.imageDelete(name, force, noprune, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet(name: string, options?: any): AxiosPromise<File> {
            return localVarFp.imageGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the \'repositories\' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {Array<string>} [names] Image names to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGetAll(names?: Array<string>, options?: any): AxiosPromise<File> {
            return localVarFp.imageGetAll(names, options).then((request) => request(axios, basePath));
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageHistory(name: string, options?: any): AxiosPromise<Array<HistoryResponseItem>> {
            return localVarFp.imageHistory(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspect(name: string, options?: any): AxiosPromise<ImageInspect> {
            return localVarFp.imageInspect(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) 
         * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList(all?: boolean, filters?: string, digests?: boolean, options?: any): AxiosPromise<Array<ImageSummary>> {
            return localVarFp.imageList(all, filters, digests, options).then((request) => request(axios, basePath));
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {boolean} [quiet] Suppress progress details during load.
         * @param {File} [imagesTarball] Tar archive containing images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLoad(quiet?: boolean, imagesTarball?: File, options?: any): AxiosPromise<void> {
            return localVarFp.imageLoad(quiet, imagesTarball, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete unused images
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machineâ€™s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePrune(filters?: string, options?: any): AxiosPromise<ImagePruneResponse> {
            return localVarFp.imagePrune(filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {string} name Image name or ID.
         * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {string} [tag] The tag to associate with the image on the registry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePush(name: string, xRegistryAuth: string, tag?: string, options?: any): AxiosPromise<void> {
            return localVarFp.imagePush(name, xRegistryAuth, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {string} term Term to search
         * @param {number} [limit] Maximum number of results to return
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least \&#39;number\&#39; stars. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearch(term: string, limit?: number, filters?: string, options?: any): AxiosPromise<Array<ImageSearchResponseItem>> {
            return localVarFp.imageSearch(term, limit, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {string} name Image name or ID to tag.
         * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
         * @param {string} [tag] The name of the new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageTag(name: string, repo?: string, tag?: string, options?: any): AxiosPromise<void> {
            return localVarFp.imageTag(name, repo, tag, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - object-oriented interface
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @summary Delete builder cache
     * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
     * @param {boolean} [all] Remove all types of build cache
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon\&#39;s time, during which build cache was not used, in Go\&#39;s duration format (e.g., \&#39;24h\&#39;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public buildPrune(keepStorage?: number, all?: boolean, filters?: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).buildPrune(keepStorage, all, filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive\'s root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
     * @summary Build an image
     * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
     * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
     * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
     * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the fileâ€™s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
     * @param {boolean} [q] Suppress verbose build output.
     * @param {boolean} [nocache] Do not use the cache when building the image.
     * @param {string} [cachefrom] JSON array of images used for build cache resolution.
     * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
     * @param {boolean} [rm] Remove intermediate containers after a successful build.
     * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
     * @param {number} [memory] Set memory limit for build.
     * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
     * @param {number} [cpushares] CPU shares (relative weight).
     * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
     * @param {number} [cpuperiod] The length of a CPU period in microseconds.
     * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
     * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
     * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
     * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
     * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
     * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network\&#39;s name or ID to which this container should connect to. 
     * @param {ImageBuildContentTypeEnum} [contentType] 
     * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
     * @param {string} [platform] Platform in the format os[/arch[/variant]]
     * @param {string} [target] Target build stage
     * @param {string} [outputs] BuildKit output configuration
     * @param {ImageBuildVersionEnum} [version] Version of the builder backend to use.  - &#x60;1&#x60; is the first generation classic (deprecated) builder in the Docker daemon (default) - &#x60;2&#x60; is [BuildKit](https://github.com/moby/buildkit) 
     * @param {File} [inputStream] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageBuild(dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: ImageBuildContentTypeEnum, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, version?: ImageBuildVersionEnum, inputStream?: File, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageBuild(dockerfile, t, extrahosts, remote, q, nocache, cachefrom, pull, rm, forcerm, memory, memswap, cpushares, cpusetcpus, cpuperiod, cpuquota, buildargs, shmsize, squash, labels, networkmode, contentType, xRegistryConfig, platform, target, outputs, version, inputStream, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new image from a container
     * @param {string} [container] The ID or name of the container to commit
     * @param {string} [repo] Repository name for the created image
     * @param {string} [tag] Tag name for the create image
     * @param {string} [comment] Commit message
     * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
     * @param {boolean} [pause] Whether to pause the container before committing
     * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
     * @param {ContainerConfig} [containerConfig] The container configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageCommit(container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, containerConfig?: ContainerConfig, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageCommit(container, repo, tag, comment, author, pause, changes, containerConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an image by either pulling it from a registry or importing it.
     * @summary Create an image
     * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
     * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
     * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
     * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
     * @param {string} [message] Set commit message for imported image.
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
     * @param {string} [platform] Platform in the format os[/arch[/variant]]
     * @param {string} [inputImage] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageCreate(fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, inputImage?: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageCreate(fromImage, fromSrc, repo, tag, message, xRegistryAuth, changes, platform, inputImage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an image, along with any untagged parent images that were referenced by that image.  Images can\'t be removed if they have descendant images, are being used by a running container or are being used by a build. 
     * @summary Remove an image
     * @param {string} name Image name or ID
     * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
     * @param {boolean} [noprune] Do not delete untagged parent images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageDelete(name: string, force?: boolean, noprune?: boolean, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageDelete(name, force, noprune, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
     * @summary Export an image
     * @param {string} name Image name or ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageGet(name: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the \'repositories\' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Export several images
     * @param {Array<string>} [names] Image names to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageGetAll(names?: Array<string>, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageGetAll(names, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return parent layers of an image.
     * @summary Get the history of an image
     * @param {string} name Image name or ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageHistory(name: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageHistory(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return low-level information about an image.
     * @summary Inspect an image
     * @param {string} name Image name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageInspect(name: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageInspect(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     * @summary List Images
     * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) 
     * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageList(all?: boolean, filters?: string, digests?: boolean, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageList(all, filters, digests, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Import images
     * @param {boolean} [quiet] Suppress progress details during load.
     * @param {File} [imagesTarball] Tar archive containing images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageLoad(quiet?: boolean, imagesTarball?: File, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageLoad(quiet, imagesTarball, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete unused images
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machineâ€™s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imagePrune(filters?: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imagePrune(filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
     * @summary Push an image
     * @param {string} name Image name or ID.
     * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {string} [tag] The tag to associate with the image on the registry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imagePush(name: string, xRegistryAuth: string, tag?: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imagePush(name, xRegistryAuth, tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for an image on Docker Hub.
     * @summary Search images
     * @param {string} term Term to search
     * @param {number} [limit] Maximum number of results to return
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least \&#39;number\&#39; stars. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageSearch(term: string, limit?: number, filters?: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageSearch(term, limit, filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag an image so that it becomes part of a repository.
     * @summary Tag an image
     * @param {string} name Image name or ID to tag.
     * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
     * @param {string} [tag] The name of the new tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public imageTag(name: string, repo?: string, tag?: string, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageTag(name, repo, tag, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @enum {string}
  */
export enum ImageBuildContentTypeEnum {
    ApplicationXTar = 'application/x-tar'
}
/**
  * @enum {string}
  */
export enum ImageBuildVersionEnum {
    _1 = '1',
    _2 = '2'
}
