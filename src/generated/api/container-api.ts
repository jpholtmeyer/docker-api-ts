/* tslint:disable */
/* eslint-disable */
/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ContainerChangeResponseItem } from '../models';
// @ts-ignore
import type { ContainerCreateRequest } from '../models';
// @ts-ignore
import type { ContainerCreateResponse } from '../models';
// @ts-ignore
import type { ContainerInspectResponse } from '../models';
// @ts-ignore
import type { ContainerPruneResponse } from '../models';
// @ts-ignore
import type { ContainerSummary } from '../models';
// @ts-ignore
import type { ContainerTopResponse } from '../models';
// @ts-ignore
import type { ContainerUpdateRequest } from '../models';
// @ts-ignore
import type { ContainerUpdateResponse } from '../models';
// @ts-ignore
import type { ContainerWaitResponse } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
/**
 * ContainerApi - axios parameter creator
 * @export
 */
export const ContainerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchive: async (id: string, path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerArchive', 'id', id)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('containerArchive', 'path', path)
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchiveInfo: async (id: string, path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerArchiveInfo', 'id', id)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('containerArchiveInfo', 'path', path)
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client\'s `stdin`. 
         * @summary Attach to a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
         * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttach: async (id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerAttach', 'id', id)
            const localVarPath = `/containers/{id}/attach`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }

            if (logs !== undefined) {
                localVarQueryParameter['logs'] = logs;
            }

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }

            if (stdin !== undefined) {
                localVarQueryParameter['stdin'] = stdin;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
         * @param {boolean} [logs] Return logs
         * @param {boolean} [stream] Return stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttachWebsocket: async (id: string, detachKeys?: string, logs?: boolean, stream?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerAttachWebsocket', 'id', id)
            const localVarPath = `/containers/{id}/attach/ws`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }

            if (logs !== undefined) {
                localVarQueryParameter['logs'] = logs;
            }

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns which files in a container\'s filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified - `1`: Added - `2`: Deleted 
         * @summary Get changes on a container’s filesystem
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerChanges: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerChanges', 'id', id)
            const localVarPath = `/containers/{id}/changes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainerCreateRequest} body Container to create
         * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
         * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host\&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image\&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerCreate: async (body: ContainerCreateRequest, name?: string, platform?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('containerCreate', 'body', body)
            const localVarPath = `/containers/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a container
         * @param {string} id ID or name of the container
         * @param {boolean} [v] Remove anonymous volumes associated with the container.
         * @param {boolean} [force] If the container is running, kill it before removing it.
         * @param {boolean} [link] Remove the specified link associated with the container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerDelete: async (id: string, v?: boolean, force?: boolean, link?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerDelete', 'id', id)
            const localVarPath = `/containers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (link !== undefined) {
                localVarQueryParameter['link'] = link;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExport: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerExport', 'id', id)
            const localVarPath = `/containers/{id}/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {string} id ID or name of the container
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerInspect: async (id: string, size?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerInspect', 'id', id)
            const localVarPath = `/containers/{id}/json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerKill: async (id: string, signal?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerKill', 'id', id)
            const localVarPath = `/containers/{id}/kill`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signal !== undefined) {
                localVarQueryParameter['signal'] = signal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
         * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
         * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container\&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container\&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerList: async (all?: boolean, limit?: number, size?: boolean, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/containers/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {string} id ID or name of the container
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {number} [until] Only return logs before this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerLogs: async (id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerLogs', 'id', id)
            const localVarPath = `/containers/{id}/logs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (timestamps !== undefined) {
                localVarQueryParameter['timestamps'] = timestamps;
            }

            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPause: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerPause', 'id', id)
            const localVarPath = `/containers/{id}/pause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPrune: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/containers/prune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rename a container
         * @param {string} id ID or name of the container
         * @param {string} name New name for the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRename: async (id: string, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerRename', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('containerRename', 'name', name)
            const localVarPath = `/containers/{id}/rename`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {string} id ID or name of the container
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerResize: async (id: string, h?: number, w?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerResize', 'id', id)
            const localVarPath = `/containers/{id}/resize`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (h !== undefined) {
                localVarQueryParameter['h'] = h;
            }

            if (w !== undefined) {
                localVarQueryParameter['w'] = w;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restart a container
         * @param {string} id ID or name of the container
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRestart: async (id: string, t?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerRestart', 'id', id)
            const localVarPath = `/containers/{id}/restart`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStart: async (id: string, detachKeys?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerStart', 'id', id)
            const localVarPath = `/containers/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {string} id ID or name of the container
         * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
         * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStats: async (id: string, stream?: boolean, oneShot?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerStats', 'id', id)
            const localVarPath = `/containers/{id}/stats`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }

            if (oneShot !== undefined) {
                localVarQueryParameter['one-shot'] = oneShot;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop a container
         * @param {string} id ID or name of the container
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStop: async (id: string, t?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerStop', 'id', id)
            const localVarPath = `/containers/{id}/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {string} id ID or name of the container
         * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerTop: async (id: string, psArgs?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerTop', 'id', id)
            const localVarPath = `/containers/{id}/top`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (psArgs !== undefined) {
                localVarQueryParameter['ps_args'] = psArgs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUnpause: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerUnpause', 'id', id)
            const localVarPath = `/containers/{id}/unpause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {string} id ID or name of the container
         * @param {ContainerUpdateRequest} update 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUpdate: async (id: string, update: ContainerUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerUpdate', 'id', id)
            // verify required parameter 'update' is not null or undefined
            assertParamExists('containerUpdate', 'update', update)
            const localVarPath = `/containers/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(update, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {string} id ID or name of the container
         * @param {ContainerWaitConditionEnum} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerWait: async (id: string, condition?: ContainerWaitConditionEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerWait', 'id', id)
            const localVarPath = `/containers/{id}/wait`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (condition !== undefined) {
                localVarQueryParameter['condition'] = condition;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {string} id ID or name of the container
         * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
         * @param {File} inputStream The input stream must be a tar archive compressed with one of the following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;, or &#x60;xz&#x60;. 
         * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
         * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContainerArchive: async (id: string, path: string, inputStream: File, noOverwriteDirNonDir?: string, copyUIDGID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putContainerArchive', 'id', id)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('putContainerArchive', 'path', path)
            // verify required parameter 'inputStream' is not null or undefined
            assertParamExists('putContainerArchive', 'inputStream', inputStream)
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (noOverwriteDirNonDir !== undefined) {
                localVarQueryParameter['noOverwriteDirNonDir'] = noOverwriteDirNonDir;
            }

            if (copyUIDGID !== undefined) {
                localVarQueryParameter['copyUIDGID'] = copyUIDGID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/x-tar';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputStream, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContainerApi - functional programming interface
 * @export
 */
export const ContainerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContainerApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerArchive(id: string, path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerArchive(id, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerArchive']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerArchiveInfo(id: string, path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerArchiveInfo(id, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerArchiveInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client\'s `stdin`. 
         * @summary Attach to a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
         * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerAttach(id, detachKeys, logs, stream, stdin, stdout, stderr, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerAttach']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
         * @param {boolean} [logs] Return logs
         * @param {boolean} [stream] Return stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerAttachWebsocket(id, detachKeys, logs, stream, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerAttachWebsocket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns which files in a container\'s filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified - `1`: Added - `2`: Deleted 
         * @summary Get changes on a container’s filesystem
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerChanges(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContainerChangeResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerChanges(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainerCreateRequest} body Container to create
         * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
         * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host\&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image\&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerCreate(body: ContainerCreateRequest, name?: string, platform?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerCreate(body, name, platform, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a container
         * @param {string} id ID or name of the container
         * @param {boolean} [v] Remove anonymous volumes associated with the container.
         * @param {boolean} [force] If the container is running, kill it before removing it.
         * @param {boolean} [link] Remove the specified link associated with the container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerDelete(id, v, force, link, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerExport(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerExport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerExport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {string} id ID or name of the container
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerInspect(id: string, size?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerInspectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerInspect(id, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerKill(id: string, signal?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerKill(id, signal, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerKill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
         * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
         * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container\&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container\&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContainerSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerList(all, limit, size, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {string} id ID or name of the container
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {number} [until] Only return logs before this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerLogs(id, follow, stdout, stderr, since, until, timestamps, tail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerPause(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerPause(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerPause']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerPrune(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerPruneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerPrune(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerPrune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rename a container
         * @param {string} id ID or name of the container
         * @param {string} name New name for the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerRename(id: string, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerRename(id, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerRename']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {string} id ID or name of the container
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerResize(id: string, h?: number, w?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerResize(id, h, w, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerResize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restart a container
         * @param {string} id ID or name of the container
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerRestart(id: string, t?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerRestart(id, t, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerRestart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Start a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerStart(id: string, detachKeys?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerStart(id, detachKeys, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerStart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {string} id ID or name of the container
         * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
         * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerStats(id: string, stream?: boolean, oneShot?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerStats(id, stream, oneShot, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Stop a container
         * @param {string} id ID or name of the container
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerStop(id: string, t?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerStop(id, t, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerStop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {string} id ID or name of the container
         * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerTop(id: string, psArgs?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTopResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerTop(id, psArgs, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerTop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerUnpause(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerUnpause(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerUnpause']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {string} id ID or name of the container
         * @param {ContainerUpdateRequest} update 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerUpdate(id: string, update: ContainerUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerUpdate(id, update, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {string} id ID or name of the container
         * @param {ContainerWaitConditionEnum} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerWait(id: string, condition?: ContainerWaitConditionEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerWaitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerWait(id, condition, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerWait']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {string} id ID or name of the container
         * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
         * @param {File} inputStream The input stream must be a tar archive compressed with one of the following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;, or &#x60;xz&#x60;. 
         * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
         * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putContainerArchive(id: string, path: string, inputStream: File, noOverwriteDirNonDir?: string, copyUIDGID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putContainerArchive(id, path, inputStream, noOverwriteDirNonDir, copyUIDGID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.putContainerArchive']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContainerApi - factory interface
 * @export
 */
export const ContainerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContainerApiFp(configuration)
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchive(id: string, path: string, options?: any): AxiosPromise<void> {
            return localVarFp.containerArchive(id, path, options).then((request) => request(axios, basePath));
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchiveInfo(id: string, path: string, options?: any): AxiosPromise<void> {
            return localVarFp.containerArchiveInfo(id, path, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client\'s `stdin`. 
         * @summary Attach to a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
         * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.containerAttach(id, detachKeys, logs, stream, stdin, stdout, stderr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
         * @param {boolean} [logs] Return logs
         * @param {boolean} [stream] Return stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.containerAttachWebsocket(id, detachKeys, logs, stream, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns which files in a container\'s filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified - `1`: Added - `2`: Deleted 
         * @summary Get changes on a container’s filesystem
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerChanges(id: string, options?: any): AxiosPromise<Array<ContainerChangeResponseItem>> {
            return localVarFp.containerChanges(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainerCreateRequest} body Container to create
         * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
         * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host\&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image\&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerCreate(body: ContainerCreateRequest, name?: string, platform?: string, options?: any): AxiosPromise<ContainerCreateResponse> {
            return localVarFp.containerCreate(body, name, platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a container
         * @param {string} id ID or name of the container
         * @param {boolean} [v] Remove anonymous volumes associated with the container.
         * @param {boolean} [force] If the container is running, kill it before removing it.
         * @param {boolean} [link] Remove the specified link associated with the container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.containerDelete(id, v, force, link, options).then((request) => request(axios, basePath));
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExport(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.containerExport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {string} id ID or name of the container
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerInspect(id: string, size?: boolean, options?: any): AxiosPromise<ContainerInspectResponse> {
            return localVarFp.containerInspect(id, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerKill(id: string, signal?: string, options?: any): AxiosPromise<void> {
            return localVarFp.containerKill(id, signal, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
         * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
         * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container\&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container\&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options?: any): AxiosPromise<Array<ContainerSummary>> {
            return localVarFp.containerList(all, limit, size, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {string} id ID or name of the container
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {number} [until] Only return logs before this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options?: any): AxiosPromise<File> {
            return localVarFp.containerLogs(id, follow, stdout, stderr, since, until, timestamps, tail, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPause(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.containerPause(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPrune(filters?: string, options?: any): AxiosPromise<ContainerPruneResponse> {
            return localVarFp.containerPrune(filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rename a container
         * @param {string} id ID or name of the container
         * @param {string} name New name for the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRename(id: string, name: string, options?: any): AxiosPromise<void> {
            return localVarFp.containerRename(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {string} id ID or name of the container
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerResize(id: string, h?: number, w?: number, options?: any): AxiosPromise<void> {
            return localVarFp.containerResize(id, h, w, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restart a container
         * @param {string} id ID or name of the container
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRestart(id: string, t?: number, options?: any): AxiosPromise<void> {
            return localVarFp.containerRestart(id, t, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStart(id: string, detachKeys?: string, options?: any): AxiosPromise<void> {
            return localVarFp.containerStart(id, detachKeys, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {string} id ID or name of the container
         * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
         * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStats(id: string, stream?: boolean, oneShot?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.containerStats(id, stream, oneShot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop a container
         * @param {string} id ID or name of the container
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStop(id: string, t?: number, options?: any): AxiosPromise<void> {
            return localVarFp.containerStop(id, t, options).then((request) => request(axios, basePath));
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {string} id ID or name of the container
         * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerTop(id: string, psArgs?: string, options?: any): AxiosPromise<ContainerTopResponse> {
            return localVarFp.containerTop(id, psArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUnpause(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.containerUnpause(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {string} id ID or name of the container
         * @param {ContainerUpdateRequest} update 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUpdate(id: string, update: ContainerUpdateRequest, options?: any): AxiosPromise<ContainerUpdateResponse> {
            return localVarFp.containerUpdate(id, update, options).then((request) => request(axios, basePath));
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {string} id ID or name of the container
         * @param {ContainerWaitConditionEnum} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerWait(id: string, condition?: ContainerWaitConditionEnum, options?: any): AxiosPromise<ContainerWaitResponse> {
            return localVarFp.containerWait(id, condition, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {string} id ID or name of the container
         * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
         * @param {File} inputStream The input stream must be a tar archive compressed with one of the following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;, or &#x60;xz&#x60;. 
         * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
         * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContainerArchive(id: string, path: string, inputStream: File, noOverwriteDirNonDir?: string, copyUIDGID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.putContainerArchive(id, path, inputStream, noOverwriteDirNonDir, copyUIDGID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContainerApi - object-oriented interface
 * @export
 * @class ContainerApi
 * @extends {BaseAPI}
 */
export class ContainerApi extends BaseAPI {
    /**
     * Get a tar archive of a resource in the filesystem of container id.
     * @summary Get an archive of a filesystem resource in a container
     * @param {string} id ID or name of the container
     * @param {string} path Resource in the container’s filesystem to archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerArchive(id: string, path: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerArchive(id, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
     * @summary Get information about files in a container
     * @param {string} id ID or name of the container
     * @param {string} path Resource in the container’s filesystem to archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerArchiveInfo(id: string, path: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerArchiveInfo(id, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client\'s `stdin`. 
     * @summary Attach to a container
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
     * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
     * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
     * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
     * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerAttach(id, detachKeys, logs, stream, stdin, stdout, stderr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attach to a container via a websocket
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
     * @param {boolean} [logs] Return logs
     * @param {boolean} [stream] Return stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerAttachWebsocket(id, detachKeys, logs, stream, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns which files in a container\'s filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified - `1`: Added - `2`: Deleted 
     * @summary Get changes on a container’s filesystem
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerChanges(id: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerChanges(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a container
     * @param {ContainerCreateRequest} body Container to create
     * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
     * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host\&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image\&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerCreate(body: ContainerCreateRequest, name?: string, platform?: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerCreate(body, name, platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a container
     * @param {string} id ID or name of the container
     * @param {boolean} [v] Remove anonymous volumes associated with the container.
     * @param {boolean} [force] If the container is running, kill it before removing it.
     * @param {boolean} [link] Remove the specified link associated with the container.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerDelete(id, v, force, link, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export the contents of a container as a tarball.
     * @summary Export a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerExport(id: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerExport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return low-level information about a container.
     * @summary Inspect a container
     * @param {string} id ID or name of the container
     * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerInspect(id: string, size?: boolean, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerInspect(id, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a POSIX signal to a container, defaulting to killing to the container. 
     * @summary Kill a container
     * @param {string} id ID or name of the container
     * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerKill(id: string, signal?: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerKill(id, signal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
     * @summary List containers
     * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
     * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
     * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
     * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container\&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container\&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerList(all, limit, size, filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
     * @summary Get container logs
     * @param {string} id ID or name of the container
     * @param {boolean} [follow] Keep connection after returning logs.
     * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
     * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
     * @param {number} [since] Only return logs since this time, as a UNIX timestamp
     * @param {number} [until] Only return logs before this time, as a UNIX timestamp
     * @param {boolean} [timestamps] Add timestamps to every log line
     * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerLogs(id, follow, stdout, stderr, since, until, timestamps, tail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
     * @summary Pause a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerPause(id: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerPause(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete stopped containers
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerPrune(filters?: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerPrune(filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rename a container
     * @param {string} id ID or name of the container
     * @param {string} name New name for the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerRename(id: string, name: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerRename(id, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resize the TTY for a container.
     * @summary Resize a container TTY
     * @param {string} id ID or name of the container
     * @param {number} [h] Height of the TTY session in characters
     * @param {number} [w] Width of the TTY session in characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerResize(id: string, h?: number, w?: number, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerResize(id, h, w, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restart a container
     * @param {string} id ID or name of the container
     * @param {number} [t] Number of seconds to wait before killing the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerRestart(id: string, t?: number, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerRestart(id, t, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start a container
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStart(id: string, detachKeys?: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerStart(id, detachKeys, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
     * @summary Get container stats based on resource usage
     * @param {string} id ID or name of the container
     * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
     * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStats(id: string, stream?: boolean, oneShot?: boolean, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerStats(id, stream, oneShot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop a container
     * @param {string} id ID or name of the container
     * @param {number} [t] Number of seconds to wait before killing the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStop(id: string, t?: number, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerStop(id, t, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
     * @summary List processes running inside a container
     * @param {string} id ID or name of the container
     * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerTop(id: string, psArgs?: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerTop(id, psArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resume a container which has been paused.
     * @summary Unpause a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerUnpause(id: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerUnpause(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change various configuration options of a container without having to recreate it. 
     * @summary Update a container
     * @param {string} id ID or name of the container
     * @param {ContainerUpdateRequest} update 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerUpdate(id: string, update: ContainerUpdateRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerUpdate(id, update, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Block until a container stops, then returns the exit code.
     * @summary Wait for a container
     * @param {string} id ID or name of the container
     * @param {ContainerWaitConditionEnum} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerWait(id: string, condition?: ContainerWaitConditionEnum, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerWait(id, condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
     * @summary Extract an archive of files or folders to a directory in a container
     * @param {string} id ID or name of the container
     * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
     * @param {File} inputStream The input stream must be a tar archive compressed with one of the following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;, or &#x60;xz&#x60;. 
     * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
     * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public putContainerArchive(id: string, path: string, inputStream: File, noOverwriteDirNonDir?: string, copyUIDGID?: string, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).putContainerArchive(id, path, inputStream, noOverwriteDirNonDir, copyUIDGID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum ContainerWaitConditionEnum {
    NotRunning = 'not-running',
    NextExit = 'next-exit',
    Removed = 'removed'
}
